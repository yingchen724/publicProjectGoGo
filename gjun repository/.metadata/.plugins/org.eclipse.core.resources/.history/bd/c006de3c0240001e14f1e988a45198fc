package com.example.demo.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.model.Member;
import com.example.demo.model.MemberRepository;

@RestController
@RequestMapping("/member")
public class MemberController {
@Autowired
MemberRepository repo;
	
List<Member> data=null;
	
	@PostMapping("/addmember")
    public ResponseEntity<?> createMember(@RequestBody Member m) {
   
    if(repo.existsByEmail(m.getEmail())) {
    	
    	return  ResponseEntity.status(HttpStatus.BAD_REQUEST).body("email is already exist");
    }
    	Member me=repo.save(m);
    	return new ResponseEntity<>(me,HttpStatus.CREATED);
    }
	
	@RequestMapping(value="/findmember",method=RequestMethod.GET)
	public List<Member> getAllMember(){
	 return repo.findAll();
	}
	@RequestMapping(value="/findbyemail/{email}",method=RequestMethod.GET)
	public List<Member> findbyemail(@PathVariable("email")String email){
		
			
		Member m=data.stream().filter(e->e.getEmail().equals(email)).findFirst().get();
		data=repo.findAll();
		return data;
		
	}
	
	
	  @PutMapping("/{email}")
	    public ResponseEntity<?> updateMember(@PathVariable String email, @RequestBody Member m) {
		
		  
		  Member me=data.stream().filter(e->e.getEmail().equals(m.getEmail())).findFirst().orElse(null);
   	   			me.setName(m.getName());
   	   			me.setEmail(m.getEmail());
   	   			me.setPassword(m.getPassword());
   	   			me.setAddress(m.getAddress());
   	   			me.setMobile(m.getMobile());
		  System.out.println(me);
		  
	    	if(me!=null) {  
	    	 
	           repo.save(me);
	    	   return new ResponseEntity<>(m, HttpStatus.OK);
	    	}
	    	else {
	          return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("email not exist");
	    }
	  }		  
	  @RequestMapping(value= "/{email}",method=RequestMethod.DELETE)
	  public ResponseEntity<String> deleteEmployee(@PathVariable("email")String email){
	  	List<Member> data=repo.findAll();
	  	Member m=data.stream().filter(e->e.getEmail().equals(email)).findFirst().get();
	  	if(m!=null) {
	  		repo.delete(m);
	  		return new ResponseEntity<String>(HttpStatus.OK);
	  	}
	  	else {
	  		return new ResponseEntity<String>(HttpStatus.NOT_FOUND);
	  	}
	  }
}
