package com.example.demo.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.model.Member;
import com.example.demo.model.MemberRepository;

@RestController
public class MemberController {
@Autowired
MemberRepository repo;
	List<Member> data=null;
	
	
	@PostMapping("/addmember")
    public ResponseEntity<?> createMember(@RequestBody Member m) {
   
    if(repo.existsByEmail(m.getEmail())) {
    	
    	return  ResponseEntity.status(HttpStatus.BAD_REQUEST).body("email is already exist");
    }
    	Member me=repo.save(m);
    	return new ResponseEntity<>(me,HttpStatus.CREATED);
    }
	
	@RequestMapping(value="/member",method=RequestMethod.GET)
	public List<Member> getAllMember(){
	 return repo.findAll();
	}
	
	
	
	  @PutMapping("/{email}")
	    public ResponseEntity<?> updateMember(@PathVariable String email, @RequestBody Member m) {
	     
	    	  /*data=repo.findAll();
	    	   Member me=data.stream().filter(e->e.getEmail().equals(m.getEmail())).findFirst().orElse(m);
	    	   me.setName(m.getName());
	    	   me.setEmail(m.getEmail());
	    	   me.setPassword(m.getPassword());
	    	   me.setAddress(m.getAddress());
	    	   me.setMobile(m.getMobile());
	    	if(me!=null) {   
	    	   repo.save(me);*/
		  if(repo.existsByEmail(m.getEmail())) {
			  repo.save(m);
	    	
	    	   return new ResponseEntity<>(m, HttpStatus.OK);
	    	}
	    	else {
	        return new ResponseEntity<>(m,HttpStatus.NOT_FOUND);
	    }
	  }		  
	 /* @DeleteMapping("/{email}")
	public ResponseEntity<?> deleteMember(@PathVariable String email){
		  
		  
	  }*/
}
